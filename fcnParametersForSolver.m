    
function para = fcnParametersForSolver(p)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            
%   Initialize the structure "para" to pass to these 4 functions:
%
%           1- fcnSolve_dmdt
%           2- fcnSolve_dmdt_kRvariable
%           3- fcnSolve_dPdt
%           4- fcnSolve_dPdt_kRvariable
%
%          
%
%   p: Is a structure usually defined in the main file 
%
%       p.Rw        % Radius of cavity (m)
%       p.H         % Height of cavity (m)
%
%       p.model     % 0 -> Ideal gaz: Z = 1;
%                   % 1 -> Simplified model: Z = Z0; dZdT = ZT0
%
%       p.R         % Specific gas constant for hydrogen (J/Kg/K)
%       p.Ti        % Injected gas temperature (K)
%       p.T0        % Initial gas temperature (K)
%       p.P0        % Initial gas pressure (Pa)
%       p.dz        % Vertical distance between inlet and middle of the tank (m)

%       p.TRw0      % Initial rock temparature (K)
%       p.Pe        % Air pressur at reservoir edge (Pa)
%       p.rhoR      % Rock density (kg/m^3)
%       p.cpR       % Constant pressure specific heat of rock (J/kg/K)
%       p.hc        % Heat transfer coefficient  (W/m2/K)
%       p.kR        % thermal conductivity (W/m/K)
%

% ======================================================================
% Copyright (c) March 2023, Bernard Doyon (bdoyon@cegepgarneau.ca)
%
% ======================================================================
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% load the interpolation functions for the hydrogen gaz properties
load('ScatterInterpFunctions','Z_Trho','Z_TP','dZdT_rho',...
                'dZdT_P','dZdP_T','H','Cp','Cv','kH2','mu');
            
% The interpolation functions  
%
%   The interpolation functions are generated by the function
%   "GenerateHydrogenPropertiesFunctions.m" and store in the file
%   "ScatterInterpFunctions.mat". 
%   
%   You need to run the file "GenerateHydrogenPropertiesFunctions.m" only
%   once to get the Inerpolation functions "ScatterInterpFunctions.mat".
%   
%   It is possible to adapt the interpolation domain for the temperature
%   and pressure and also the number of points for the interpolation. In
%   order to do so, you need to edit and adapt the file 
%   "GenerateHydrogenPropertiesFunctions.m" and run it once.


para.Z_Trho = Z_Trho;       % Z interpolation as a function of T and rho (Z = Compressibility)
para.Z_TP = Z_TP;           % Z interpolation as a function of T and P               
para.dZdT_rho = dZdT_rho;   % Z interpolation as a function of T and rho
para.dZdT_P = dZdT_P;       % dZ/dt at constant Pressure interpolation as a function of T and P 
para.dZdP_T = dZdP_T;       % dZ/dP at constant Temperature interpolation as a function of T and P 
para.H = H;                 % Hydrogen enthalpy interpolation function as a function of T and P
para.Cp = Cp;               % Specific heat at constant pressure interpolation function as a function of T and P
para.Cv = Cv;               % Specific heat at constant volume interpolation function as a function of T and P
para.kH2 = kH2;             % Conductivity of H2 interpolation function as a function of T and P
para.mu = mu;               % Viscosity of H2 interpolation function as a function of T and P


para.Rw_int = p.Rw_int;     % radius of cavity (m)  
para.Rw = p.Rw/p.Rw_int;    % normalized radius where properties are changing

switch p.geometry
    case 1 % horizontal tank
        para.L = 2*p.Rw_int;         % Carateristic length for Nusselt and Rayleigh number
    case 2 % vertical tank
        para.L  = p.H;
end

para.underground = p.underground;
    
para.Dinlet = p.Dinlet; 

%Gaz parameters for hydrogen (gas A)
para.R = p.R;                               % Specific gas constant for hydrogen (J/Kg/K)
para.cp0 = fcnCp0(p.T0);                    % Cp at T0 (J/Kg/K) (low pressure; for ideal gaz solution)
para.T0 = p.T0;                             % Initial gas temperature (K)
para.P0 = p.P0;                             % Initial gas pressure (Pa)
para.Z0 = para.Z_TP(p.T0,p.P0);             % Initial compressibility factor
para.rho0 = p.P0/p.R/Z_TP(p.T0,p.P0)/p.T0;  % Initial density (kg/m^3)
switch p.model
    case 0 % if ideal gaz
        para.rho0Simple = p.P0/p.R/p.T0;        % 
        para.cv0 = para.cp0 - para.R;           % Low pressure specific heat (J/Kg/K) (for ideal gaz solution) 
        para.gamma = para.cp0/para.cv0;         % Kushnir gamma parameters 
        para.ZT0 = 0;                           % Initial dZ/dT (derivative of compressibility at constant rho)
        para.Rs = para.R/para.cv0;              % Kushnir R*
        para.Us = 0;                            % Kushnir U*
    case 1
        para.rho0Simple = para.rho0;
        para.cv0 = para.Cv(p.T0,p.P0);              % Initial Cv0
        para.gamma = para.cp0/para.cv0;             % Kushnir gamma parameters 
        para.ZT0 = para.dZdT_rho(p.T0,p.P0);        %dZ/dT at constant rho
        para.Rs = para.R*para.Z0/para.cv0;          % Kushnir R*
        para.Us = para.R*para.ZT0*para.T0/para.cv0; % Kushnir U*
end
para.potential = 9.8*p.dz;         % Potentiel energy of injected gaz (J/kg/K)

%Normalized gas parameter 
para.Ti = p.Ti/p.T0;               % Normalized injected gas temperature (K)

if(isfield(p, 'Tair'))
    para.Tair = p.Tair/p.T0;
end

% Heat exchange parameters
para.TRw0 = p.TRw0/p.T0;                    % Normalized initial tank temperature    

para.kR = p.kR;
para.alpha = p.alpha;
para.F0 = p.tp/(p.Rw_int)^2.*p.alpha./p.kR;     % New Fo parameter (does not include the conductivity)
para.F02 = p.alpha*p.tp/p.Rw_int^2;             % Kushnir F0

if (p.hc_int == 0)
    para.Nusselt =1;
    para.Bi_int = p.Rw_int/p.kR(1);             % Kushnir Bo parameter with hc =1
    para.qr = p.Ac_int/p.mc;           % Kushnir qr parameter without cv0
    para.qp = p.Ac_int*p.P0/p.pc/para.rho0/p.V; % qp parameter (see my personnal notes, when imposing dP/dt)
    para.qpSimple = p.Ac_int*p.P0/p.pc/para.rho0Simple/p.V; 
else
    para.Nusselt =0;
    para.Bi_int = p.hc_int*p.Rw_int/p.kR(1);
    para.qr = p.hc_int*p.Ac_int/p.mc;                    % Kushnir qr paramete rwithout cv0
    para.qp = p.hc_int*p.Ac_int*p.P0/p.pc/para.rho0/p.V; % qp parameter (see my personnal notes, when imposing dP/dt) 
    para.qpSimple = p.hc_int*p.Ac_int*p.P0/p.pc/para.rho0Simple/p.V;
    para.hc_int = p.hc_int;
end    

if(isfield(p, 'hc_ext'))
    para.Bi_ext = p.hc_ext*p.Rw(end)/p.kR(end);  
end
% Injection scenario for one cycle

para.tp = p.tp;                         % Period of cycle (s)
para.Fie = p.Fie;                       % Handler to a function that gives the modulation of injection/discharge mass rate as a function of time   
para.Gie = p.Gie;                       % Handler to a function that gives the modulation of injection/discharge pressure rate as a function of time 
para.mr = p.mc*p.tp/para.rho0/p.V;      % mr = (dm/dt)*t_p/rho/V (different from Kushnir (see my notes))
para.pr = p.pc*p.tp/p.P0;               % pr = (dP/dt)*t_p/P0 (see my notes)
para.V = p.V;                           % Volume of cavity (m^3)
para.pc = p.pc;                         % dP/dt; (Pa/s)

para.ThermalPropertiesFunction = @p.ThermalPropertiesCavity;

end
